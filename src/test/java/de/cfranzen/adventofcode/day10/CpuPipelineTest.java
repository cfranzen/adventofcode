package de.cfranzen.adventofcode.day10;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class CpuPipelineTest {

    @Test
    void testCycling() {
        final CpuPipeline cpu = new CpuPipeline();
        cpu.addx(15);
        cpu.addx(-11);
        cpu.addx(6);
        cpu.addx(-3);
        cpu.addx(5);
        cpu.addx(-1);
        cpu.addx(-8);
        cpu.addx(13);
        cpu.addx(4);
        cpu.noop();
        cpu.addx(-1);
        cpu.addx(5);
        cpu.addx(-1);
        cpu.addx(5);
        cpu.addx(-1);
        cpu.addx(5);
        cpu.addx(-1);
        cpu.addx(5);
        cpu.addx(-1);
        cpu.addx(-35);
        cpu.addx(1);
        cpu.addx(24);
        cpu.addx(-19);
        cpu.addx(1);
        cpu.addx(16);
        cpu.addx(-11);
        cpu.noop();
        cpu.noop();
        cpu.addx(21);
        cpu.addx(-15);
        cpu.noop();
        cpu.noop();
        cpu.addx(-3);
        cpu.addx(9);
        cpu.addx(1);
        cpu.addx(-3);
        cpu.addx(8);
        cpu.addx(1);
        cpu.addx(5);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(-36);
        cpu.noop();
        cpu.addx(1);
        cpu.addx(7);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(2);
        cpu.addx(6);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(1);
        cpu.noop();
        cpu.noop();
        cpu.addx(7);
        cpu.addx(1);
        cpu.noop();
        cpu.addx(-13);
        cpu.addx(13);
        cpu.addx(7);
        cpu.noop();
        cpu.addx(1);
        cpu.addx(-33);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(2);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(8);
        cpu.noop();
        cpu.addx(-1);
        cpu.addx(2);
        cpu.addx(1);
        cpu.noop();
        cpu.addx(17);
        cpu.addx(-9);
        cpu.addx(1);
        cpu.addx(1);
        cpu.addx(-3);
        cpu.addx(11);
        cpu.noop();
        cpu.noop();
        cpu.addx(1);
        cpu.noop();
        cpu.addx(1);
        cpu.noop();
        cpu.noop();
        cpu.addx(-13);
        cpu.addx(-19);
        cpu.addx(1);
        cpu.addx(3);
        cpu.addx(26);
        cpu.addx(-30);
        cpu.addx(12);
        cpu.addx(-1);
        cpu.addx(3);
        cpu.addx(1);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(-9);
        cpu.addx(18);
        cpu.addx(1);
        cpu.addx(2);
        cpu.noop();
        cpu.noop();
        cpu.addx(9);
        cpu.noop();
        cpu.noop();
        cpu.noop();
        cpu.addx(-1);
        cpu.addx(2);
        cpu.addx(-37);
        cpu.addx(1);
        cpu.addx(3);
        cpu.noop();
        cpu.addx(15);
        cpu.addx(-21);
        cpu.addx(22);
        cpu.addx(-6);
        cpu.addx(1);
        cpu.noop();
        cpu.addx(2);
        cpu.addx(1);
        cpu.noop();
        cpu.addx(-10);
        cpu.noop();
        cpu.noop();
        cpu.addx(20);
        cpu.addx(1);
        cpu.addx(2);
        cpu.addx(2);
        cpu.addx(-6);
        cpu.addx(-11);
        cpu.noop();
        cpu.noop();
        cpu.noop();

        assertThat(cpu.getSignalStrength(20)).isEqualTo(420);
        assertThat(cpu.getSignalStrength(60)).isEqualTo(1140);
        assertThat(cpu.getSignalStrength(100)).isEqualTo(1800);
        assertThat(cpu.getSignalStrength(140)).isEqualTo(2940);
        assertThat(cpu.getSignalStrength(180)).isEqualTo(2880);
        assertThat(cpu.getSignalStrength(220)).isEqualTo(3960);
    }
}